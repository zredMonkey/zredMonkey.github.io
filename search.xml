<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Algorithm</title>
      <link href="/2023/08/01/Algorithm/"/>
      <url>/2023/08/01/Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="一、动态规划"><a href="#一、动态规划" class="headerlink" title="一、动态规划"></a>一、动态规划</h1><p>动态规划（Dynamic Programming，简称DP）是一种常用于解决优化问题和计数问题的算法思想。它通过<strong>将一个复杂问题分解为若干个子问题，然后逐步解决这些子问题，最终得到原问题的解</strong>。&#x3D;&#x3D;动态规划的核心思想是“递推”和“存储”，即通过已经解决的子问题的解来推导出更大规模问题的解，并将这些子问题的解进行存储以避免重复计算，从而提高算法的效率&#x3D;&#x3D;。</p><p>动态规划适用于满足以下两个条件的问题：</p><ol><li><p>重叠子问题（Overlapping Subproblems）：问题的解可以被分解为多个子问题，而且这些子问题之间存在重叠，即同一个子问题可能会被多次求解。</p></li><li><p>最优子结构（Optimal Substructure）：问题的最优解可以由其子问题的最优解推导而来。换句话说，问题的整体最优解可以通过子问题的最优解组合而成。</p></li></ol><p>动态规划通常有两种常见的方法：</p><ol><li><p>自顶向下（Top-Down）：也称为记忆化递归，通过递归地解决问题，但在求解子问题时使用数组等数据结构来存储已经计算过的解，以避免重复计算。</p></li><li><p>自底向上（Bottom-Up）：通过解决问题的子问题，从最小规模的问题开始，逐步构建解决大规模问题的方法。这种方法通常会使用一个数组或表格来存储子问题的解，以便后续问题可以直接从已经计算出的解中获取。</p></li></ol><p>动态规划广泛应用于许多领域，例如：</p><ul><li>背包问题（Knapsack Problem）</li><li>最短路径问题（Shortest Path Problem）</li><li>最长公共子序列问题（Longest Common Subsequence Problem）</li><li>斐波那契数列问题（Fibonacci Sequence Problem）</li><li>编辑距离问题（Edit Distance Problem）</li><li>最大子数组和问题（Maximum Subarray Sum Problem）</li><li>…等等</li></ul><p>总之，动态规划是一种通过将问题分解为子问题，逐步构建解决方案并存储已计算的结果来优化问题求解过程的算法思想。</p><p><strong>大致步骤：</strong></p><ol><li><p><strong>定义子问题：</strong> 将原始问题分解为若干个更小的子问题。这些子问题应该满足最优子结构，即问题的最优解可以由子问题的最优解推导而来。</p></li><li><p><strong>找出状态转移方程：</strong> 对每个子问题定义一个状态，然后找出子问题之间的关系，即状态之间的转移方程。这个方程描述了子问题的解与其相关子问题解之间的关系。</p></li><li><p><strong>初始化：</strong> 初始化一些基本的子问题，通常是最小规模的问题的解。这些初始化值将作为构建更大规模问题解的基础。</p></li><li><p><strong>自底向上求解（或者记忆化递归）：</strong> 通过迭代地求解子问题，从最小规模的问题开始，逐步构建解决大规模问题的方法。这可以通过自底向上的迭代方法实现，或者使用自顶向下的记忆化递归方法，其中使用数组等数据结构来存储已经计算过的解。</p></li><li><p><strong>存储中间结果：</strong> 在求解子问题的过程中，将已经计算过的子问题的解存储起来，以避免重复计算，提高算法效率。</p></li><li><p><strong>得到最终解：</strong> 当所有子问题都求解完毕后，最终问题的解就可以从中获得。这通常是整个问题的最优解。</p></li><li><p><strong>可选的优化：</strong> 根据具体情况，你还可以对算法进行进一步优化，例如利用滚动数组、状态压缩等技巧来减少空间复杂度。</p></li></ol><h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><p><strong>题目：</strong><br>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。<br><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>示例 1：<br>输入：nums &#x3D; [10,9,2,5,3,7,101,18]<br>输出：4<br>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p><p>示例 2：<br>输入：nums &#x3D; [0,1,0,3,2,3]<br>输出：4</p><p>示例 3：<br>输入：nums &#x3D; [7,7,7,7,7,7,7]<br>输出：1</p><p>提示：<br>1 &lt;&#x3D; nums.length &lt;&#x3D; 2500<br>-104 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p><p><strong>注意</strong>「⼦序列」和「⼦串」这两个名词的区别，⼦串⼀定是连续的，⽽⼦序列不⼀定是连续的</p><p><strong>思想解释：</strong></p><ol><li>我们使用一个数组 <code>dp</code> 来保存以每个元素结尾的最长递增子序列的长度。初始时，每个元素自成一个长度为1的子序列。</li><li>我们从数组的第二个元素开始遍历，对于每个元素 <code>nums[i]</code>，我们再遍历它之前的所有元素 <code>nums[j]</code>（<code>j &lt; i</code>）。如果 <code>nums[i]</code> 大于 <code>nums[j]</code>，说明可以将 <code>nums[i]</code> 加入以 <code>nums[j]</code> 结尾的子序列，从而构成一个更长的递增子序列。我们更新 <code>dp[i]</code> 为 <code>dp[j] + 1</code>，表示以 <code>nums[i]</code> 结尾的最长递增子序列长度。</li><li>在内层循环中，我们不断更新 <code>dp[i]</code>，找到以当前元素 <code>nums[i]</code> 结尾的最长递增子序列长度。</li><li>在整个过程中，我们维护一个全局变量 <code>maxLen</code>，记录最长递增子序列的长度。</li><li>最终，遍历完整个数组后，<code>maxLen</code> 就是最长递增子序列的长度。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongestIncreasingSubsequence</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length]; <span class="comment">// dp[i] 表示以 nums[i] 结尾的最长递增子序列长度</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 初始化，单个元素也构成递增子序列</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 最长递增子序列长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>; <span class="comment">// 默认以当前元素为结尾的子序列长度为 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>); <span class="comment">// 更新最长递增子序列长度</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLen = Math.max(maxLen, dp[i]); <span class="comment">// 更新全局最长长度</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lisLength</span> <span class="operator">=</span> lengthOfLIS(nums);</span><br><span class="line">        System.out.println(<span class="string">&quot;Length of Longest Increasing Subsequence: &quot;</span> + lisLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><p><strong>题目：</strong><br>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p><p>示例 1:<br>输入:<br>s &#x3D; “aa”<br>p &#x3D; “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。</p><p>示例 2:<br>输入:<br>s &#x3D; “aa”<br>p &#x3D; “a*”<br>输出: true<br>解释: 因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。</p><p>示例 3:<br>输入:<br>s &#x3D; “ab”<br>p &#x3D; “.<em>“<br>输出: true<br>解释: “.</em>“ 表示可匹配零个或多个（’*’）任意字符（’.’）。</p><p>示例 4:<br>输入:<br>s &#x3D; “aab”<br>p &#x3D; “c<em>a</em>b”<br>输出: true<br>解释: 因为 ‘*’ 表示零个或多个，这里 ‘c’ 为 0 个, ‘a’ 被重复一次。因此可以匹配字符串 “aab”。</p><p>示例 5:<br>输入:<br>s &#x3D; “mississippi”<br>p &#x3D; “mis<em>is</em>p*.”<br>输出: false<br>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 <em>，无连续的 ‘</em>‘。</p><p><strong>解题思路如下：</strong></p><ol><li>我们可以使用动态规划来解决正则表达式匹配问题。</li><li>定义一个二维布尔数组dp，其中dp[i][j]表示字符串的前i个字符与正则表达式的前j个字符是否匹配。</li><li>初始化dp[0][0]为true，表示空字符串和空正则表达式是匹配的。</li><li>遍历字符串和正则表达式的每个字符，逐步填充dp数组。</li><li>如果s[i]和p[j]相等，或者p[j]为’.’，则dp[i][j]的值取决于dp[i-1][j-1]，表示当前字符匹配成功。</li><li>如果p[j]为’*’，则需要考虑两种情况：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-  &#x27;*&#x27;表示前面的字符重复0次，则dp[i][j]的值取决于dp[i][j-2]。</span><br><span class="line">-  &#x27;*&#x27;表示前面的字符重复1次或多次，则dp[i][j]的值取决于dp[i-1][j]且s[i]和p[j-1]相等，或者p[j-1]为&#x27;.&#x27;。</span><br></pre></td></tr></table></figure><ol start="7"><li>其他情况下，dp[i][j]的值为false，表示当前字符匹配失败。</li><li>最终返回dp[len(s)][len(p)]的值，表示整个字符串与正则表达式是否匹配。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularExpressionMatching</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dp[i][j]表示s的前i个字符和p的前j个字符是否匹配</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 空字符串和空正则表达式匹配</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理空正则表达式可以匹配的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充dp表格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">sc</span> <span class="operator">=</span> s.charAt(i - <span class="number">1</span>);</span><br><span class="line">                <span class="type">char</span> <span class="variable">pc</span> <span class="operator">=</span> p.charAt(j - <span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (sc == pc || pc == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pc == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">prevPc</span> <span class="operator">=</span> p.charAt(j - <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">if</span> (prevPc == sc || prevPc == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">// 匹配0次、1次或多次</span></span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>] || dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - <span class="number">2</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 匹配0次</span></span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;mississippi&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> <span class="string">&quot;mis*is*p*.&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> isMatch(s, p);</span><br><span class="line">        System.out.println(<span class="string">&quot;Is match: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释解释：</p><ol><li><code>dp[i][j]</code>表示s的前i个字符和p的前j个字符是否匹配。</li><li>初始化：空字符串和空正则表达式匹配，<code>dp[0][0] = true</code>。</li><li>处理空正则表达式可以匹配的情况：如果p的某个字符是’*’，那么它可以匹配0次，将<code>dp[0][j]</code>设置为<code>dp[0][j-2]</code>。</li><li>填充dp表格：根据字符匹配和’*’的特性，更新<code>dp[i][j]</code>的值。</li><li>最终结：<code>dp[m][n]</code>表示s的全部字符和p的全部字符是否匹配。</li></ol><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>回文串是指正着读和倒着读都一样的字符串。例如，”aba”、”abba”和”level”都是回文串。</p><p><strong>题目：</strong><br>给你一个字符串 s，找到 s 中最长的回文子串。<br>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p>示例 1：<br>输入：s &#x3D; “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。</p><p>示例 2：<br>输入：s &#x3D; “cbbd”<br>输出：”bb”</p><p>提示：<br>1 &lt;&#x3D; s.length &lt;&#x3D; 1000<br>s 仅由数字和英文字母组成</p><p><strong>解题思路：</strong></p><ol><li>我们可以使用动态规划来解决最长回文子串问题。定义一个二维数组dp，其中dp[i][j]表示从索引i到j的子串是否为回文串。</li><li>初始化dp数组，将所有长度为1的子串都设为回文串，即dp[i][i] &#x3D; true。</li><li>遍历字符串中所有可能的子串，从长度为2的子串开始，到长度为n的子串结束（n为字符串长度）。</li><li>对于每个子串，判断头尾两个字符是否相等，并根据之前计算的dp数组来判断子串是否为回文串，即dp[i][j] &#x3D; (s[i] &#x3D;&#x3D; s[j]) &amp;&amp; dp[i+1][j-1]。</li><li>如果当前子串是回文串并且长度比之前的最长回文串更长，更新最长回文串的起始位置和长度。</li><li>最终得到的最长回文子串就是最长的回文串。</li></ol><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongestPalindromeSubstring</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n]; <span class="comment">// dp[i][j]表示s的子串从i到j是否为回文子串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录最长回文子串的起始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 记录最长回文子串的长度</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 所有单个字符都是回文子串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查长度为2的子串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                maxLength = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查长度大于2的子串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">3</span>; len &lt;= n; len++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - len; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + len - <span class="number">1</span>; <span class="comment">// 子串的结束位置</span></span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(j) &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                    maxLength = len;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + maxLength);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;babad&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">longestPalindrome</span> <span class="operator">=</span> longestPalindrome(input);</span><br><span class="line">        System.out.println(<span class="string">&quot;Longest Palindrome Substring: &quot;</span> + longestPalindrome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释解释：</p><ol><li><code>dp[i][j]</code>表示s的子串从索引i到j是否是回文子串。</li><li>初始化：所有单个字符都是回文子串，即<code>dp[i][i] = true</code>。</li><li>检查长度为2的子串：如果相邻两个字符相等，那么它们是回文子串，即<code>dp[i][i+1] = true</code>。</li><li>检查长度大于2的子串：通过动态规划，依次计算长度为3到n的所有子串是否为回文子串。</li><li>最终结果：根据<code>dp</code>数组的信息，找到最长回文子串的起始位置和长度，然后通过<code>substring</code>方法获取最长回文子串。<br>注意：虽然动态规划是一种解决最长回文子串问题的方法，但还有其他更优秀的算法，如Manacher算法等，可以在时间复杂度上做更多优化。</li></ol><h2 id="回文子串个数"><a href="#回文子串个数" class="headerlink" title="回文子串个数"></a>回文子串个数</h2><p><strong>题目：</strong><br>给定一个字符串 s ，请计算这个字符串中有多少个回文子字符串。<br>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p><p>示例 1：<br>输入：s &#x3D; “abc”<br>输出：3<br>解释：三个回文子串: “a”, “b”, “c”</p><p>示例 2：<br>输入：s &#x3D; “aaa”<br>输出：6<br>解释：6个回文子串: “a”, “a”, “a”, “aa”, “aa”, “aaa”</p><p>提示：<br>1 &lt;&#x3D; s.length &lt;&#x3D; 1000<br>s 由小写英文字母组成</p><p><strong>解法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountPalindromicSubstrings</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录回文子串的个数</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n]; <span class="comment">// dp[i][j]表示s的子串从i到j是否为回文子串</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 所有单个字符都是回文子串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查长度为2的子串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查长度大于2的子串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">3</span>; len &lt;= n; len++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - len; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + len - <span class="number">1</span>; <span class="comment">// 子串的结束位置</span></span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(j) &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">palindromeCount</span> <span class="operator">=</span> countSubstrings(input);</span><br><span class="line">        System.out.println(<span class="string">&quot;Palindrome Substrings Count: &quot;</span> + palindromeCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释解释：</p><ol><li><code>dp[i][j]</code>表示s的子串从索引i到j是否是回文子串。</li><li>初始化：所有单个字符都是回文子串，即<code>dp[i][i] = true</code>，并且<code>count</code>加1。</li><li>检查长度为2的子串：如果相邻两个字符相等，那么它们是回文子串，即<code>dp[i][i+1] = true</code>，并且<code>count</code>加1。</li><li>检查长度大于2的子串：通过动态规划，依次计算长度为3到n的所有子串是否为回文子串，如果是，则<code>dp[i][j]</code>为true，同时<code>count</code>加1。</li><li>最终结果：返回<code>count</code>，即回文子串的个数。</li></ol><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>背包问题是动态规划中的经典问题之一。给定一组物品，每个物品有对应的重量和价值，背包有限的承载重量，要求在不超过背包承载重量的前提下，选择物品放入背包，使得背包中物品的总价值最大。</p><p><strong>解题思路：</strong></p><ol><li>我们可以使用动态规划来解决0-1背包问题。首先，定义一个二维数组<code>dp</code>，其中<code>dp[i][j]</code>表示在前i个物品中选择总重量不超过j的情况下的最大价值。</li><li>初始化<code>dp</code>数组，将第0行和第0列的值都设为0，表示没有物品或背包承载重量为0时的最大价值为0。</li><li>遍历物品和背包承载重量，对于每个物品和背包承载重量：</li></ol><ul><li>如果物品i的重量大于当前背包承载重量j，说明物品i不能放入背包，所以<code>dp[i][j]</code>的最大价值和<code>dp[i-1][j]</code>一样。</li><li>如果物品i的重量小于等于当前背包承载重量j，我们可以考虑是否将物品i放入背包。如果放入物品i，则背包中剩余的重量为<code>j - weights[i]</code>，所以最大价值为<code>values[i] + dp[i-1][j-weights[i]]</code>；如果不放入物品i，则最大价值为<code>dp[i-1][j]</code>。我们选择两者中较大的值作为<code>dp[i][j]</code>的最大价值。其中 <code>weight[i]</code> 为物品 i 的重量，<code>value[i]</code> 为物品 i 的价值。</li></ul><ol start="4"><li>最后<code>dp[n][W]</code>即为问题的解，其中n表示物品的个数，W表示背包的承载重量。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class KnapsackProblem &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param weights    物品的重量数组</span><br><span class="line">     * @param values     价值数组</span><br><span class="line">     * @param capacity   背包容量</span><br><span class="line">     * @return 最大价值</span><br><span class="line">     */</span><br><span class="line">    public static int knapsack(int[] weights, int[] values, int capacity) &#123;</span><br><span class="line"></span><br><span class="line">        int n = weights.length;</span><br><span class="line"></span><br><span class="line">        // 创建一个二维数组来保存状态转移结果，dp[i][j] 表示在前 i 个物品中，背包容量为 j 时的最大价值</span><br><span class="line">        int[][] dp = new int[n + 1][capacity + 1];</span><br><span class="line"></span><br><span class="line">        // 填充 dp 数组，进行状态转移</span><br><span class="line">        for (int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;= capacity; j++) &#123;</span><br><span class="line">                // 如果当前物品的重量大于当前背包容量，无法放入，直接继承上一行的最大价值</span><br><span class="line">                if (weights[i - 1] &gt; j) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - 1][j];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // 否则，可以选择放入当前物品或不放入，取两者中的最大值</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i - 1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 返回最终结果，即在考虑所有物品后，背包容量为 capacity 时的最大价值</span><br><span class="line">        return dp[n][capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] weights = &#123;2, 3, 4, 5&#125;;</span><br><span class="line">        int[] values = &#123;3, 4, 5, 6&#125;;</span><br><span class="line">        int capacity = 5;</span><br><span class="line">        int result = knapsack(weights, values, capacity);</span><br><span class="line">        System.out.println(&quot;Maximum value: &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 输出结果</span><br><span class="line">Maximum value: 7</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列（Longest-Common-Subsequence）问题"><a href="#最长公共子序列（Longest-Common-Subsequence）问题" class="headerlink" title="最长公共子序列（Longest Common Subsequence）问题"></a>最长公共子序列（Longest Common Subsequence）问题</h2><p>最长公共子序列（Longest Common Subsequence，简称LCS）问题是一种经典的动态规划问题，用于找到两个序列中最长的公共子序列的长度。</p><p>给定两个序列A和B，我们要找到它们的最长公共子序列。子序列是指从序列中删除零个或多个元素而不改变其相对顺序后得到的新序列。</p><p><strong>解题思路：</strong></p><ol><li>我们可以使用动态规划来解决LCS问题。首先，定义一个二维数组<code>dp</code>，其中<code>dp[i][j]</code>表示序列A的前i个元素和序列B的前j个元素的最长公共子序列的长度。</li><li>初始化<code>dp</code>数组，将第0行和第0列的值都设为0，表示当一个序列为空时，与任何序列的最长公共子序列长度都为0。</li><li>遍历两个序列的元素，对于每个元素<code>A[i]</code>和<code>B[j]</code>：</li></ol><ul><li>如果<code>A[i]</code>和<code>B[j]</code>相等，说明它们可以作为最长公共子序列的一部分，因此<code>dp[i][j]</code>的值应该是<code>dp[i-1][j-1] + 1</code>，即在之前的最长公共子序列长度上加1。</li><li>如果<code>A[i]</code>和<code>B[j]</code>不相等，说明它们不能同时出现在最长公共子序列中，此时我们需要考虑舍弃其中一个元素，即取<code>dp[i-1][j]</code>和<code>dp[i][j-1]</code>中的较大值作为<code>dp[i][j]</code>的值。</li></ul><ol start="4"><li>最后，<code>dp[n][m]</code>即为序列A和B的最长公共子序列的长度，其中n和m分别是序列A和B的长度。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class LongestCommonSubsequence &#123;</span><br><span class="line"></span><br><span class="line">    public static int longestCommonSubsequence(String text1, String text2) &#123;</span><br><span class="line">        int m = text1.length();</span><br><span class="line">        int n = text2.length();</span><br><span class="line"></span><br><span class="line">        // 创建一个二维数组 dp，dp[i][j] 表示 text1 前 i 个字符和 text2 前 j 个字符的最长公共子序列长度</span><br><span class="line">        int[][] dp = new int[m + 1][n + 1];</span><br><span class="line"></span><br><span class="line">        // 填充 dp 数组，进行状态转移</span><br><span class="line">        for (int i = 1; i &lt;= m; i++) &#123;</span><br><span class="line">            for (int j = 1; j &lt;= n; j++) &#123;</span><br><span class="line">                // 如果当前字符相同，说明可以将这个字符纳入公共子序列中，长度加一</span><br><span class="line">                if (text1.charAt(i - 1) == text2.charAt(j - 1)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - 1][j - 1] + 1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // 否则，选择不使用当前字符，取前面最长的公共子序列长度</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 返回 text1 和 text2 的最长公共子序列长度</span><br><span class="line">        return dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String text1 = &quot;abcde&quot;;</span><br><span class="line">        String text2 = &quot;ace&quot;;</span><br><span class="line">        int result = longestCommonSubsequence(text1, text2);</span><br><span class="line">        System.out.println(&quot;Longest Common Subsequence: &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Longest Common Subsequence: 3</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="打家劫舍（House-Robber）问题：如不相邻的房屋偷窃的最大金额。"><a href="#打家劫舍（House-Robber）问题：如不相邻的房屋偷窃的最大金额。" class="headerlink" title="打家劫舍（House Robber）问题：如不相邻的房屋偷窃的最大金额。"></a>打家劫舍（House Robber）问题：如不相邻的房屋偷窃的最大金额。</h2><p><strong>题目：</strong></p><p>一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响小偷偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组 nums ，请计算 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p>示例 1：</p><p>输入：nums &#x3D; [1,2,3,1]<br>输出：4<br>解释：偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。<br>     偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</p><p>示例 2：</p><p>输入：nums &#x3D; [2,7,9,3,1]<br>输出：12<br>解释：偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。<br>     偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</p><p>提示：</p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 100</li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 400</li></ul><p><strong>解题思路：</strong></p><ol><li>我们可以使用动态规划来解决这个问题。定义一个一维数组dp，其中dp[i]表示偷窃前i个房屋能够得到的最大金额。</li><li>初始化dp数组，dp[0]为第一个房屋的金额，dp[1]为第二个房屋和第一个房屋金额的较大值。</li><li>遍历数组，对于每个房屋i，考虑两种情况：</li></ol><ul><li>偷窃第i个房屋：则最大金额为dp[i-2]+nums[i]，即偷窃第i-2个房屋的最大金额加上第i个房屋的金额。</li><li>不偷窃第i个房屋：则最大金额为dp[i-1]，即偷窃前i-1个房屋的最大金额。</li><li>取两种情况中的较大值作为dp[i]的值。</li></ul><ol start="4"><li>最终，dp[n-1]即为偷窃到的最大金额，其中n为房屋的个数。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class HouseRobberI &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param nums 一个代表每个房屋存放金额的非负整数数组</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int rob(int[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        int n = nums.length;</span><br><span class="line"></span><br><span class="line">        if (n == 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (n == 1) &#123;</span><br><span class="line">            return nums[0];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // dp[i] 表示偷窃前 i 个房屋能够获得的最大金额</span><br><span class="line">        int[] dp = new int[n];</span><br><span class="line">        dp[0] = nums[0];</span><br><span class="line">        dp[1] = Math.max(nums[0], nums[1]);</span><br><span class="line"></span><br><span class="line">        for (int i = 2; i &lt; n; i++) &#123;</span><br><span class="line">            // 在当前房屋偷窃或不偷窃之间选择最大值</span><br><span class="line">            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 返回最后一个房屋偷窃或不偷窃的最大金额</span><br><span class="line">        return dp[n - 1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] nums = &#123;2, 7, 9, 3, 1&#125;;</span><br><span class="line">        int result = rob(nums);</span><br><span class="line">        System.out.println(&quot;Maximum amount: &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Maximum amount: 12</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="二、回溯算法"><a href="#二、回溯算法" class="headerlink" title="二、回溯算法"></a>二、回溯算法</h1><p>回溯算法是一种穷举搜索的算法，其核心思想是通过递归的方式尝试所有可能的情况，直到找到问题的解或确定问题无解。在搜索过程中，当发现当前选择无法达到目标或导致问题无解时，会回退到上一步选择另一种可能，继续尝试。</p><p>回溯算法的基本步骤如下：</p><ul><li>确定问题的解空间：即问题所有可能的解组成的空间。这个空间可能是一个树状结构，每个节点表示一个可能的选择。</li><li>递归地搜索解空间：从根节点开始，对每个节点进行深度优先搜索，考虑当前节点的选择并继续向下搜索。如果搜索到达叶子节点且得到一个有效解，或者搜索无法继续进行，则回退到上一层节点，选择另一种可能继续搜索。</li><li>剪枝优化：在搜索过程中，通过某些条件判断可以提前结束不可能得到解的搜索，从而减少不必要的计算。</li></ul><p>回溯算法可以用来解决组合问题、排列问题、子集问题、棋盘问题等。当问题的解空间较大且搜索的过程中需要考虑选择与限制条件时，回溯算法通常是一种有效的解题思路。</p><p>回溯算法可以用来解决组合问题、排列问题、子集问题、棋盘问题等。当问题的解空间较大且搜索的过程中需要考虑选择与限制条件时，回溯算法通常是一种有效的解题思路。</p><p>一些常见的回溯算法问题包括：</p><ul><li>全排列（Permutations）</li><li>组合求和（Combination Sum）</li><li>子集（Subsets）</li><li>N皇后问题（N-Queens）</li><li>单词搜索（Word Search）</li><li>正则表达式匹配（Regular Expression Matching）等。</li></ul><p>回溯算法的灵活性和穷举性使得它适用于解决许多复杂的组合问题和排列问题。然而，由于其穷举搜索的性质，对于一些大规模问题，回溯算法的计算复杂度可能会非常高。因此，在实际应用中，对于问题规模较大的情况，可能需要结合其他优化方法来提高算法效率。</p><p><strong>回溯算法框架：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Value&gt; result;</span><br><span class="line">void backtrack(路径， 选择列表) &#123;</span><br><span class="line">    if (满足结束条件) &#123;</span><br><span class="line">        result.add(路径);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (选择 ： 选择列表) &#123;</span><br><span class="line">        做选择;</span><br><span class="line">        backtrack(路径， 选择列表);</span><br><span class="line">        撤销选择;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>全排列（Permutations）问题是一个经典的回溯算法问题。给定一个不含重复元素的整数数组，要求返回所有可能的排列方式。</p><p><strong>解题思路如下：</strong></p><ol><li>首先，我们可以使用递归来实现回溯算法。</li><li>使用一个辅助函数来递归地生成排列。函数参数包括当前排列的状态、已使用的数字集合、原始整数数组，以及存储所有排列结果的变量。</li><li>递归的终止条件是当前排列的长度等于原始整数数组的长度，表示当前排列已经完成，将其添加到结果中。</li><li>在递归过程中，遍历未使用的数字，每次选择一个数字加入当前排列中，并将其标记为已使用，然后继续递归生成下一个位置的排列。</li><li>在回溯的过程中，将已使用的数字状态恢复，以便尝试其他的选择。</li></ol><p><strong>题目：</strong></p><p>给定一个不含重复数字的整数数组 nums ，返回其 所有可能的全排列 。可以 按任意顺序 返回答案。</p><p>示例 1：<br>输入：nums &#x3D; [1,2,3]<br>输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p><p>示例 2：<br>输入：nums &#x3D; [0,1]<br>输出：[[0,1],[1,0]]</p><p>示例 3：<br>输入：nums &#x3D; [1]<br>输出：[[1]]</p><p>提示：<br>1 &lt;&#x3D; nums.length &lt;&#x3D; 6<br>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10<br>nums 中的所有整数 互不相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class PermutationsBacktracking &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] nums = &#123;1, 2, 3&#125;;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; permutations = permute(nums);</span><br><span class="line">        for (List&lt;Integer&gt; permutation : permutations) &#123;</span><br><span class="line">            System.out.println(permutation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 初始化了一个空的结果列表</span><br><span class="line">    public static List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        // 全排列</span><br><span class="line">        backtrack(nums, new ArrayList&lt;&gt;(), result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 回溯函数，用于生成全排列</span><br><span class="line">     * @param nums      数组 【1，2，3】</span><br><span class="line">     * @param track     记录路径  进入一个新节点，要加入这个节点的元素；退后一个节点时，要删除这个节点元素</span><br><span class="line">     * @param result    存储全排列结果</span><br><span class="line">     */</span><br><span class="line">    private static void backtrack(int[] nums, List&lt;Integer&gt; track, List&lt;List&lt;Integer&gt;&gt; result) &#123;</span><br><span class="line">        // 到达叶子节点，将路径装入结果列表</span><br><span class="line">        if (track.size() == nums.length) &#123;</span><br><span class="line">            result.add(new ArrayList&lt;&gt;(track));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 尝试每个未使用的元素</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            if (track.contains(num)) &#123;</span><br><span class="line">                // 如果当前数字已经在排列中，跳过</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            track.add(num);</span><br><span class="line">            // 递归调用</span><br><span class="line">            backtrack(nums, track, result);</span><br><span class="line">            // 回溯，移除最后一个元素</span><br><span class="line">            track.remove(track.size() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3]</span><br><span class="line">[1, 3, 2]</span><br><span class="line">[2, 1, 3]</span><br><span class="line">[2, 3, 1]</span><br><span class="line">[3, 1, 2]</span><br><span class="line">[3, 2, 1]</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h1 id="三、贪心算法"><a href="#三、贪心算法" class="headerlink" title="三、贪心算法"></a>三、贪心算法</h1><p><strong>核心思想：</strong><br>贪心算法（Greedy Algorithm）的核心思想是在每一步选择中都采取当前最优的选择，以期望达到全局最优解。换句话说，贪心算法每次都做出局部最优的选择，希望通过局部最优解的组合，达到整体最优解。</p><p>贪心算法的特点是不回溯，不考虑选择对未来的影响，而只关注当前的局部最优解。贪心算法在解决一些最优化问题时，可以快速找到一个近似最优解，但并不保证一定能找到全局最优解。因此，贪心算法通常用于那些具有贪心选择性质和最优子结构性质的问题。</p><p><strong>贪心算法的一般步骤如下</strong>：</p><ol><li>定义问题的解空间，即所有可能的解组成的集合。</li><li>制定选择策略，即在每一步都选择一个局部最优解。</li><li>确定是否满足问题的约束条件，即该解是否可行。</li><li>判断是否达到问题的目标，即该解是否是最优解。如果达到目标，则算法结束；否则，返回步骤2，继续进行选择。</li></ol><p>需要注意的是，由于贪心算法每次只考虑当前的局部最优解，因此并不适用于所有问题。在某些情况下，贪心算法可能会得到次优解或错误的结果。因此，在应用贪心算法时，需要仔细分析问题的特点，确保问题具有贪心选择性质和最优子结构性质，以保证算法能够得到正确的结果。</p><p><strong>常见算法题：</strong></p><ol><li>零钱兑换（Coin Change）：给定不同面额的硬币和一个总金额，求出使用最少的硬币数量凑成总金额。</li><li>区间调度（Interval Scheduling）：给定一组区间，选择尽可能多的不重叠区间。</li><li>分糖果（Candy）：给定一组孩子和一些糖果，分配糖果使得每个孩子至少分得一颗，相邻孩子间的糖果数应尽可能不同。</li><li>买卖股票的最佳时机（Best Time to Buy and Sell Stock）：给定一组股票的价格，只能买卖一次，求最大的利润。</li><li>跳跃游戏（Jump Game）：给定一个非负整数数组，每个元素代表在该位置可以跳跃的最大步数，判断能否到达数组的最后一个位置。</li><li>柠檬水找零（Lemonade Change）：给定一组客户支付的钞票面额，判断是否能找零（客户支付5、10、20元，柠檬水5元一杯）。</li><li>汽车加油站（Gas Station）：给定一个环形路线上的加油站和对应的汽油量，选择一个起始加油站，判断是否能绕一圈回到起点，并找出可能的起始加油站。</li><li>分发饼干（Assign Cookies）：给定一组孩子和一组饼干，每个孩子有一个满足度，每个饼干有一个大小，求能满足孩子的最大数量。</li><li>非重叠区间（Non-overlapping Intervals）：给定一组区间，移除最少的区间，使得剩余的区间互不重叠。</li><li>跳跃游戏 II（Jump Game II）：给定一个非负整数数组，每个元素代表在该位置可以跳跃的最大步数，求最少需要几步能够到达数组的最后一个位置。</li></ol><h2 id="零钱兑换（Coin-Change）：给定不同面额的硬币和一个总金额，求出使用最少的硬币数量凑成总金额。"><a href="#零钱兑换（Coin-Change）：给定不同面额的硬币和一个总金额，求出使用最少的硬币数量凑成总金额。" class="headerlink" title="零钱兑换（Coin Change）：给定不同面额的硬币和一个总金额，求出使用最少的硬币数量凑成总金额。"></a>零钱兑换（Coin Change）：给定不同面额的硬币和一个总金额，求出使用最少的硬币数量凑成总金额。</h2><p>在零钱兑换问题中，贪心算法并不是最优的解决方案，因为不是所有情况下都可以通过贪心选择得到最少硬币数量。但是，为了展示贪心算法的思想，我们可以尝试使用贪心算法解决一部分情况。</p><p>贪心算法的思想是每次都选择当前最优的硬币面额，然后尽可能多地使用该面额的硬币，直到凑满总金额。在这道题中，我们可以使用贪心算法来得到一个近似最优解，但并不能保证一定能得到全局最优解。</p><p><strong>解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class CoinChangeGreedy &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] coins = &#123;1, 2, 5&#125;; // 零钱的面额</span><br><span class="line">        int amount = 11; // 要兑换的金额</span><br><span class="line">        int numCoins = coinChange(coins, amount);</span><br><span class="line">        System.out.println(&quot;最少需要的硬币数：&quot; + numCoins);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param coins    硬币面额</span><br><span class="line">     * @param amount   要兑换的金额</span><br><span class="line">     * @return 最少使用硬币数目</span><br><span class="line">     */</span><br><span class="line">    public static int coinChange(int[] coins, int amount) &#123;</span><br><span class="line">        // 面额按从小到大排序</span><br><span class="line">        Arrays.sort(coins);</span><br><span class="line"></span><br><span class="line">        // 记录硬币数量</span><br><span class="line">        int count = 0;</span><br><span class="line">        // 从最大面额的硬币开始尝试</span><br><span class="line">        int index = coins.length - 1;</span><br><span class="line"></span><br><span class="line">        while (amount &gt; 0 &amp;&amp; index &gt;= 0) &#123;</span><br><span class="line"></span><br><span class="line">            if (coins[index] &lt;= amount) &#123;</span><br><span class="line">                // 尝试使用当前面额的硬币数量</span><br><span class="line">                int numCoins = amount / coins[index];</span><br><span class="line">                count += numCoins;</span><br><span class="line">                amount -= numCoins * coins[index];</span><br><span class="line">            &#125;</span><br><span class="line">            // 尝试下一个面额的硬币</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果剩余金额为0，返回硬币数量，否则返回-1表示无法兑换</span><br><span class="line">        return amount == 0 ? count : -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最少需要的硬币数：3</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>在这个示例中，我们通过贪心算法按照面额从大到小的顺序，尽量使用大面额的硬币来兑换金额。&#x3D;&#x3D;注意&#x3D;&#x3D;，贪心算法并不一定能得到最优解，有时候可能会得到错误的结果。例如，如果硬币面额为{1, 3, 4}，要兑换6元，贪心算法会选择使用3个硬币（4 + 1 + 1），但实际上最优解应该是2个硬币（3 + 3）。</p><p>在实际应用中，零钱兑换问题更适合使用动态规划等算法来求解，以确保得到最优解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
          <category> 回溯算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地代码提交至github仓库</title>
      <link href="/2018/01/01/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%87%B3github%E4%BB%93%E5%BA%93/"/>
      <url>/2018/01/01/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%87%B3github%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="创建github账号："><a href="#创建github账号：" class="headerlink" title="创建github账号："></a>创建github账号：</h2><p>在Github上创建一个账户。如果您已经拥有一个账户，可以跳过此步骤。</p><h2 id="创建代码仓库："><a href="#创建代码仓库：" class="headerlink" title="创建代码仓库："></a>创建代码仓库：</h2><p>在Github上创建一个代码仓库。在Github主页面上，右上角有一个“New Repository”按钮，点击该按钮，输入仓库名称和描述信息，选择公共还是私有仓库（如果您没有选购Github的付费方案，则私有仓库是需要付费的）。在确认信息无误后，点击“Create Repository”按钮即可。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>在本地电脑上安装Git。如果您已经安装了Git，可以跳过此步骤。</p><h2 id="创建和配置密钥"><a href="#创建和配置密钥" class="headerlink" title="创建和配置密钥"></a>创建和配置密钥</h2><p>要在 Git 中创建密钥，请按照以下步骤进行操作：</p><h3 id="1-打开终端或命令提示符，输入以下命令来生成-SSH-密钥："><a href="#1-打开终端或命令提示符，输入以下命令来生成-SSH-密钥：" class="headerlink" title="1.打开终端或命令提示符，输入以下命令来生成 SSH 密钥："></a>1.打开终端或命令提示符，输入以下命令来生成 SSH 密钥：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email&quot;</span><br></pre></td></tr></table></figure><h3 id="2-按回车键接受默认的文件名和位置。"><a href="#2-按回车键接受默认的文件名和位置。" class="headerlink" title="2.按回车键接受默认的文件名和位置。"></a>2.按回车键接受默认的文件名和位置。</h3><h3 id="3-输入你的密码短语（如果需要）。"><a href="#3-输入你的密码短语（如果需要）。" class="headerlink" title="3.输入你的密码短语（如果需要）。"></a>3.输入你的密码短语（如果需要）。</h3><h3 id="4-确认密码短语。"><a href="#4-确认密码短语。" class="headerlink" title="4.确认密码短语。"></a>4.确认密码短语。</h3><h3 id="5-你的-SSH-密钥现在已经生成。在终端中，输入以下命令来查看你的公钥："><a href="#5-你的-SSH-密钥现在已经生成。在终端中，输入以下命令来查看你的公钥：" class="headerlink" title="5.你的 SSH 密钥现在已经生成。在终端中，输入以下命令来查看你的公钥："></a>5.你的 SSH 密钥现在已经生成。在终端中，输入以下命令来查看你的公钥：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="6-复制你的公钥。"><a href="#6-复制你的公钥。" class="headerlink" title="6.复制你的公钥。"></a>6.复制你的公钥。</h3><h3 id="7-在-Git-托管服务（如-GitHub、GitLab、Bitbucket-等）的网站上，导航到你的账户设置页面，找到-SSH-密钥设置选项。"><a href="#7-在-Git-托管服务（如-GitHub、GitLab、Bitbucket-等）的网站上，导航到你的账户设置页面，找到-SSH-密钥设置选项。" class="headerlink" title="7.在 Git 托管服务（如 GitHub、GitLab、Bitbucket 等）的网站上，导航到你的账户设置页面，找到 SSH 密钥设置选项。"></a>7.在 Git 托管服务（如 GitHub、GitLab、Bitbucket 等）的网站上，导航到你的账户设置页面，找到 SSH 密钥设置选项。</h3><h3 id="8-点击-“Add-SSH-key”（或类似的按钮）。"><a href="#8-点击-“Add-SSH-key”（或类似的按钮）。" class="headerlink" title="8.点击 “Add SSH key”（或类似的按钮）。"></a>8.点击 “Add SSH key”（或类似的按钮）。</h3><h3 id="9-将你的公钥粘贴到-“Key”-字段中。"><a href="#9-将你的公钥粘贴到-“Key”-字段中。" class="headerlink" title="9.将你的公钥粘贴到 “Key” 字段中。"></a>9.将你的公钥粘贴到 “Key” 字段中。</h3><h3 id="10-输入一个描述性的标题以标识此密钥。"><a href="#10-输入一个描述性的标题以标识此密钥。" class="headerlink" title="10.输入一个描述性的标题以标识此密钥。"></a>10.输入一个描述性的标题以标识此密钥。</h3><h3 id="11-点击-“Add-key”（或类似的按钮）。"><a href="#11-点击-“Add-key”（或类似的按钮）。" class="headerlink" title="11.点击 “Add key”（或类似的按钮）。"></a>11.点击 “Add key”（或类似的按钮）。</h3><p>现在，你已经成功地将 SSH 密钥添加到你的 Git 托管服务中。现在，你可以使用 SSH 协议来与 Git 托管服务进行通信，而不需要每次都输入用户名和密码。</p><h2 id="创建本地代码仓库："><a href="#创建本地代码仓库：" class="headerlink" title="创建本地代码仓库："></a>创建本地代码仓库：</h2><p>在本地电脑上创建一个本地代码仓库。使用您喜欢的文件管理器，在您希望保存代码的位置创建一个新的文件夹。然后在终端中进入该文件夹，并执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这将在该文件夹中创建一个新的Git仓库。</p><h2 id="添加文件到本地代码仓库（更新）："><a href="#添加文件到本地代码仓库（更新）：" class="headerlink" title="*添加文件到本地代码仓库（更新）："></a>*添加文件到本地代码仓库（更新）：</h2><p>将新文件添加到本地代码仓库中。在终端中，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>这将把hello-world.py文件添加到Git的暂存区。</p><h2 id="提交（更新）："><a href="#提交（更新）：" class="headerlink" title="*提交（更新）："></a>*提交（更新）：</h2><p>提交更改描述。在终端中，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure><p>这将提交文件更改，并把提交描述设置为“Initial commit”。</p><h2 id="建立本地仓库和github仓库的关联："><a href="#建立本地仓库和github仓库的关联：" class="headerlink" title="建立本地仓库和github仓库的关联："></a>建立本地仓库和github仓库的关联：</h2><p>在Github仓库页面上，复制仓库的URL地址。然后在终端中执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [仓库的URL地址]</span><br></pre></td></tr></table></figure><p>这将将您的本地仓库与Github仓库关联起来。</p><h2 id="推送代码到github仓库（更新）："><a href="#推送代码到github仓库（更新）：" class="headerlink" title="*推送代码到github仓库（更新）："></a>*推送代码到github仓库（更新）：</h2><p>推送您的代码到Github仓库。执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>这将推送您的代码到Github仓库。如果您有多个分支，则将“master”替换为您要推送的分支名称。</p><p>完成上述步骤后，您的代码将被提交到Github仓库。如果您打开Github仓库页面，您将看到刚刚提交的代码。在以后的工作中，您可以迭代地修改代码，并将更改推送到Github仓库上。</p>]]></content>
      
      
      <categories>
          
          <category> github仓库 </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github仓库 </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
            <tag> 本地代码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
